// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NextVer.Infrastructure.Persistance;

#nullable disable

namespace NextVer.Infrastructure.Migrations
{
    [DbContext(typeof(NextVerDbContext))]
    [Migration("20230610154955_InitialDatabaseMigration")]
    partial class InitialDatabaseMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NextVer.Domain.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMovieTVSerieGame")
                        .HasColumnType("int");

                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TvShowId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCounter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TvShowId");

                    b.HasIndex("UserId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMovieTVSerieGame")
                        .HasColumnType("int");

                    b.Property<int>("MediaGalleryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UrlLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MediaGalleryTypeId");

                    b.HasIndex("ProductionTypeId");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("NextVer.Domain.Models.MediaGalleryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MediaGalleryTypes");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Runtime")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCounter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("NextVer.Domain.Models.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("NextVer.Domain.Models.MovieUniverse", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UniverseId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "UniverseId");

                    b.HasIndex("UniverseId");

                    b.ToTable("MovieUniverses");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMovieTVSerieGame")
                        .HasColumnType("int");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("ProductionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NextVer.Domain.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("NextVer.Domain.Models.ProductionTechnology", b =>
                {
                    b.Property<int>("ProductionVersionId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.HasKey("ProductionVersionId", "TechnologyId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("ProductionTechnologies");
                });

            modelBuilder.Entity("NextVer.Domain.Models.ProductionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductionTypes");
                });

            modelBuilder.Entity("NextVer.Domain.Models.ProductionVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMovieTVSerieGame")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LinkToProductionVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ReleasePlaceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleasedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCounter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTypeId");

                    b.HasIndex("ReleasePlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionVersions");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMovieTVSerieGame")
                        .HasColumnType("int");

                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RatingCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTypeId");

                    b.HasIndex("RatingCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("NextVer.Domain.Models.RatingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RatingCategories");
                });

            modelBuilder.Entity("NextVer.Domain.Models.ReleasePlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReleasePlaceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReleasePlaceTypeId");

                    b.ToTable("ReleasePlaces");
                });

            modelBuilder.Entity("NextVer.Domain.Models.ReleasePlaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReleasePlaceTypes");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechnologyTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyTypeId");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("NextVer.Domain.Models.TechnologyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TechnologyTypes");
                });

            modelBuilder.Entity("NextVer.Domain.Models.TvShow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCounter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TvShows");
                });

            modelBuilder.Entity("NextVer.Domain.Models.TvShowGenre", b =>
                {
                    b.Property<int>("TvShowId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("TvShowId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("TvShowGenres");
                });

            modelBuilder.Entity("NextVer.Domain.Models.TvShowUniverse", b =>
                {
                    b.Property<int>("TvShowId")
                        .HasColumnType("int");

                    b.Property<int>("UniverseId")
                        .HasColumnType("int");

                    b.HasKey("TvShowId", "UniverseId");

                    b.HasIndex("UniverseId");

                    b.ToTable("TvShowUniverses");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Universe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Universes");
                });

            modelBuilder.Entity("NextVer.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotificationsAgreement")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationTokenGeneratedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NextVer.Domain.Models.UserCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductionVersionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserCollectionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionVersionId");

                    b.HasIndex("UserCollectionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCollections");
                });

            modelBuilder.Entity("NextVer.Domain.Models.UserCollectionProduction", b =>
                {
                    b.Property<int>("UserCollectionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionVersionId")
                        .HasColumnType("int");

                    b.HasKey("UserCollectionId", "ProductionVersionId");

                    b.HasIndex("ProductionVersionId");

                    b.ToTable("UserCollectionProductions");
                });

            modelBuilder.Entity("NextVer.Domain.Models.UserCollectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserCollectionTypes");
                });

            modelBuilder.Entity("NextVer.Domain.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Comment", b =>
                {
                    b.HasOne("NextVer.Domain.Models.ProductionType", "ProductionType")
                        .WithMany("Comments")
                        .HasForeignKey("ProductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Episode", b =>
                {
                    b.HasOne("NextVer.Domain.Models.TvShow", "TvShow")
                        .WithMany("Episodes")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.User", "User")
                        .WithMany("Episodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TvShow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Gallery", b =>
                {
                    b.HasOne("NextVer.Domain.Models.MediaGalleryType", "MediaGalleryType")
                        .WithMany("Galleries")
                        .HasForeignKey("MediaGalleryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.ProductionType", "ProductionType")
                        .WithMany("Galleries")
                        .HasForeignKey("ProductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaGalleryType");

                    b.Navigation("ProductionType");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Movie", b =>
                {
                    b.HasOne("NextVer.Domain.Models.User", "User")
                        .WithMany("Movies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextVer.Domain.Models.MovieGenre", b =>
                {
                    b.HasOne("NextVer.Domain.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NextVer.Domain.Models.MovieUniverse", b =>
                {
                    b.HasOne("NextVer.Domain.Models.Movie", "Movie")
                        .WithMany("MovieUniverses")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.Universe", "Universe")
                        .WithMany("MovieUniverses")
                        .HasForeignKey("UniverseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Universe");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Notification", b =>
                {
                    b.HasOne("NextVer.Domain.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.ProductionType", "ProductionType")
                        .WithMany("Notifications")
                        .HasForeignKey("ProductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotificationType");

                    b.Navigation("ProductionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextVer.Domain.Models.NotificationType", b =>
                {
                    b.HasOne("NextVer.Domain.Models.UserType", "UserType")
                        .WithMany("NotificationTypes")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("NextVer.Domain.Models.ProductionTechnology", b =>
                {
                    b.HasOne("NextVer.Domain.Models.ProductionVersion", "ProductionVersion")
                        .WithMany("ProductionTechnologies")
                        .HasForeignKey("ProductionVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionVersion");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("NextVer.Domain.Models.ProductionVersion", b =>
                {
                    b.HasOne("NextVer.Domain.Models.ProductionType", "ProductionType")
                        .WithMany("Productions")
                        .HasForeignKey("ProductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.ReleasePlace", "ReleasePlace")
                        .WithMany("ProductionVersions")
                        .HasForeignKey("ReleasePlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.User", "User")
                        .WithMany("Productions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionType");

                    b.Navigation("ReleasePlace");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Rating", b =>
                {
                    b.HasOne("NextVer.Domain.Models.ProductionType", "ProductionType")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.RatingCategory", "RatingCategory")
                        .WithMany("Ratings")
                        .HasForeignKey("RatingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionType");

                    b.Navigation("RatingCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextVer.Domain.Models.ReleasePlace", b =>
                {
                    b.HasOne("NextVer.Domain.Models.ReleasePlaceType", "ReleasePlaceType")
                        .WithMany("ReleasePlaces")
                        .HasForeignKey("ReleasePlaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReleasePlaceType");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Technology", b =>
                {
                    b.HasOne("NextVer.Domain.Models.TechnologyType", "TechnologyType")
                        .WithMany("Technologies")
                        .HasForeignKey("TechnologyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechnologyType");
                });

            modelBuilder.Entity("NextVer.Domain.Models.TvShow", b =>
                {
                    b.HasOne("NextVer.Domain.Models.User", "User")
                        .WithMany("TvShows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextVer.Domain.Models.TvShowGenre", b =>
                {
                    b.HasOne("NextVer.Domain.Models.Genre", "Genre")
                        .WithMany("TvShowGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.TvShow", "TvShow")
                        .WithMany("TvShowGenres")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("NextVer.Domain.Models.TvShowUniverse", b =>
                {
                    b.HasOne("NextVer.Domain.Models.TvShow", "TvShow")
                        .WithMany("TvShowUniverses")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.Universe", "Universe")
                        .WithMany("TvShowUniverses")
                        .HasForeignKey("UniverseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvShow");

                    b.Navigation("Universe");
                });

            modelBuilder.Entity("NextVer.Domain.Models.User", b =>
                {
                    b.HasOne("NextVer.Domain.Models.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("NextVer.Domain.Models.UserCollection", b =>
                {
                    b.HasOne("NextVer.Domain.Models.ProductionVersion", null)
                        .WithMany("UserCollections")
                        .HasForeignKey("ProductionVersionId");

                    b.HasOne("NextVer.Domain.Models.UserCollectionType", "UserCollectionType")
                        .WithMany("UserCollections")
                        .HasForeignKey("UserCollectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.User", "User")
                        .WithMany("UserCollections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserCollectionType");
                });

            modelBuilder.Entity("NextVer.Domain.Models.UserCollectionProduction", b =>
                {
                    b.HasOne("NextVer.Domain.Models.ProductionVersion", "ProductionVersion")
                        .WithMany()
                        .HasForeignKey("ProductionVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextVer.Domain.Models.UserCollection", "UserCollection")
                        .WithMany("UserCollectionProductions")
                        .HasForeignKey("UserCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionVersion");

                    b.Navigation("UserCollection");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("TvShowGenres");
                });

            modelBuilder.Entity("NextVer.Domain.Models.MediaGalleryType", b =>
                {
                    b.Navigation("Galleries");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Movie", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("MovieUniverses");
                });

            modelBuilder.Entity("NextVer.Domain.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("NextVer.Domain.Models.ProductionType", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Galleries");

                    b.Navigation("Notifications");

                    b.Navigation("Productions");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("NextVer.Domain.Models.ProductionVersion", b =>
                {
                    b.Navigation("ProductionTechnologies");

                    b.Navigation("UserCollections");
                });

            modelBuilder.Entity("NextVer.Domain.Models.RatingCategory", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("NextVer.Domain.Models.ReleasePlace", b =>
                {
                    b.Navigation("ProductionVersions");
                });

            modelBuilder.Entity("NextVer.Domain.Models.ReleasePlaceType", b =>
                {
                    b.Navigation("ReleasePlaces");
                });

            modelBuilder.Entity("NextVer.Domain.Models.TechnologyType", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("NextVer.Domain.Models.TvShow", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("TvShowGenres");

                    b.Navigation("TvShowUniverses");
                });

            modelBuilder.Entity("NextVer.Domain.Models.Universe", b =>
                {
                    b.Navigation("MovieUniverses");

                    b.Navigation("TvShowUniverses");
                });

            modelBuilder.Entity("NextVer.Domain.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("Movies");

                    b.Navigation("Notifications");

                    b.Navigation("Productions");

                    b.Navigation("Ratings");

                    b.Navigation("TvShows");

                    b.Navigation("UserCollections");
                });

            modelBuilder.Entity("NextVer.Domain.Models.UserCollection", b =>
                {
                    b.Navigation("UserCollectionProductions");
                });

            modelBuilder.Entity("NextVer.Domain.Models.UserCollectionType", b =>
                {
                    b.Navigation("UserCollections");
                });

            modelBuilder.Entity("NextVer.Domain.Models.UserType", b =>
                {
                    b.Navigation("NotificationTypes");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
